#!/bin/sh

usage() {
	echo "Astro v0.5.0: Send or read emails from your terminal."
	echo ""
	echo "Usage: astro [url]|[option]"
	echo ""
	echo "Options:"
	echo "  -h		show this help"
	echo "  --help	show this help"
	echo "  --version	show version info"
	echo ""
	echo "Examples:"
	echo "  astro		Start browsing the default webpage"
	echo "  astro url	Start browsing url"
	echo "  astro --help	Show help"
	echo ""
	echo "Debugging:"
	echo "  debug=1 astro	Will start astro in debug mode"
	echo ""
	echo "Report bugs to: bleemayer@gmail.com"
	echo "Home page: <https://www.github.com/blmayer/astro/>"
	echo "General help: <https://www.github.com/blmayer/astro/wiki>"
}

version() {
	echo "astro 0.5.0"
	echo "Copyright (C) 2021 Brian Mayer."
	echo "License MIT: MIT License <https://opensource.org/licenses/MIT>"
	echo "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,"
	echo "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
	echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT."
	echo ""
	echo "Written by Brian Lee Mayer."
}

# Returns the complete url scheme with gemini defaults
# Parameters: url
parseurl() {
	# Credits: https://stackoverflow.com/a/6174447/7618649
	proto="$(echo "$1" | grep // | sed -e's,^\(.*:\?//\).*,\1,g')"	# extract the protocol
	url="${1/$proto/}"						# remove the protocol
	proto="$(echo "$proto" | sed -e 's,:\?//,,g')"
	user="$(echo "$url" | grep @ | cut -d@ -f1)" 			# extract the user (if any)
	hostport="$(echo "${url/$user@/}" | cut -d/ -f1)" 		# extract the host and port
	host="$(echo "$hostport" | sed -e 's,:.*,,g')" 			# by request host without port

	# by request - try to extract the port
	port="$(echo "$hostport" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
	path="$(echo "$url" | grep / | cut -d/ -f2-)" 			# extract the path (if any)
	
	[ "$debug" ] && echo "Parsed URL: proto: $proto host: $host port: $port path:$path" >&2 && sleep 2
	echo "${proto:-gemini}" "$host" "${port:-1965}" "${path:-index.gmi}"
	return 0
}


# Fetches the gemini response from server
# Parameters: proto, host, port and path
# Spec draft is here: https://gemini.circumlunar.space/docs/specification.html
fetch() {
	# Some setup first
	cols=$(tput cols)
	width=$((cols - (2*margin)))

	[ "$debug" ] && echo "Requesting $1://$2:$3/$4" >&2
	echo "$1://$2:$3/$4" | openssl s_client \
		-connect "$2:$3" -crlf -quiet \
		-ign_eof 2> /dev/null | {

		# First line is status and meta information
		read -r status meta
		meta="$(echo "$meta" | tr -d '\r')"
		[ "$debug" ] && echo "Response header: $status $meta" >&2 && sleep 1

		# Validate
		case "$status" in
			10)
				echo "Input needed" >&2
				return 1
				;;
			11)
				echo "Sensitive input needed" >&2
				return 2
				;;
			31|32)
				# Redirect
				[ "$debug" ] && echo "Redirect to: $meta" >&2
				fetch $(parseurl "$meta")
				return 0
				;;
			40)
				echo "Temporary failure" >&2
				return 3
				;;
			41)
				return 4
				;;
			42)
				return 5
				;;
			43)
				return 6
				;;
			44)
				return 7
				;;
			51)
				echo "Page not found!" >&2
				fetch $(parseurl "$prev")
				return 0
				;;
			52)
				return 10
				;;
			53)
				return 11
				;;
			59)
				echo "Bad request" >&2
				return 12
				;;
			60)
				return 13
				;;
			61)
				return 14
				;;
			62)
				return 15
				;;
		esac

		# Success
		[ "$debug" ] && echo "Success, reading body"
		[ -f "$cachedir/links.txt" ] && rm "$cachedir/links.txt"

		# Set charset
		charset="$(echo "$meta" | grep -i "charset=" | sed 's/.*charset=\([^;]\+\).*/\1/Ig')"
		case "$charset" in
			"iso-8859-1" | "ISO-8859-1") charset="iso8859" ;;
			"utf-8" | "UTF-8" | "") charset="utf8" ;;
			"us-ascii" | "US-ASCII") charset="ascii" ;;
		esac
		[ "$debug" ] && echo "Charset: $charset" >&2 && sleep 1

		i=1
		while read -r line
		do
			line="$(echo "$line" | tr -d '\r')"
			echo "$line" | grep -q '```' && pre=$((1 - pre)) && line=""

			# Add margins and fold
			if [ "$pre" = 1 ]
			then
				printf "%*s%s\n" "$margin" "" "$line"
			else
				case "$line" in
					"### "*) sty="\e[35;1m" && line="${line:4}" ;;
					"## "*) sty="\e[35;4m" && line="${line:3}" ;;
					"# "*) sty="\e[35;4;1m" && line="${line:2}" ;;
					"> "*) sty="  \e[2;3m" && line="${line:2}" ;;
					"=>"*)
						link="$(echo "$line" | sed -e 's/^=> *\(\S\+\)\(\s*.*\)/\1\t\2/g')"
						echo "$i	$link" >> "$cachedir/links.txt"
						i=$((i + 1))

						line="$(echo $link | cut -d' ' -f2-)"
						[ -z "$line" ] && line="$(echo $link | cut -d' ' -f1)"
						sty="\e[36;3m"
						line="\e[35m=>\e[36;3m $line"
						;;
					'* '*) sty="" && line=" \e[35;1mâ€¢\e[0m ${line:2}";;
					*) sty="";;
				esac
				echo "$line" | fold -w $width -s | {
					while IFS='' read -r txt
					do
						printf "%*s" "$margin" ""
						echo -e "$sty$txt"
					done
				}
			fi
		done | LESSCHARSET="$charset" less -k "$LESSKEY" +k -R
		code="$?"

		# Choose what to do next
		[ "$debug" ] && echo "pager exit code: $code"
		case "$code" in
			0) exit 0 ;;
			49)
				# Open url
				printf "Type url: "
				read -r -u 1 url
				[ "$debug" ] && echo "New url: $url" >&2

				prev="$1://$2:$3/$4"
				;;
			50) url="$1://$2:$3/$4" ;;
			51)
				# Folow link
				prev="$1://$2:$3/$4"
				[ "$debug" ] && echo "prev: $prev"

				clear
				cat "$cachedir/links.txt"
				printf "Enter link number: "
				read -r -u 1 i
				url="$(grep -G "^$i	" "$cachedir/links.txt" | cut -d'	' -f2)"
				[ "$debug" ] && echo "Link is: $url"
				;;
			52) url="$prev" ;;
			53) url="$(printf "%s://%s:%s/%s" $(parseurl "$homepage"))" ;;
		esac

		# Relative links
		echo "$url" | grep -q -E '[^/]+/[^/]+' || {
			echo "$4" | grep -q "/" && url="${4%\/*}/$url"
			url="$2:$3/$url"
		}

		[ "$debug" ] && echo "Seeking link: $url" >&2 && sleep 1
		fetch $(parseurl "$url")
	}
}

# Execution
export LESS='-P q\: quit, g\: go to link, r\: reload, b\: back, o\: open, s\: save and H\: go to homepage'

# Save terminal
tput smcup

# Restore terminal
trap "tput rmcup && exit" EXIT SIGINT SIGHUP

# Parse arguments
args="$*"
case "$args" in
	'--help'* | '-h'*)
		usage
		exit
		;;
	'--version'*)
		version
		exit
		;;
esac

# Configuration
[ -n "$HOME/.config/astro" ] && mkdir -p "$HOME/.config/astro"
configfile="$HOME/.config/astro/astro.conf"

[ -n "$HOME/.cache/astro" ] && mkdir -p "$HOME/.cache/astro"
cachedir="$HOME/.cache/astro"

LESSKEY="$HOME/.config/astro/less.keys"

# This is the final binary form, to save space, it corresponds to:
# o (49): to to a URL
# r (50): reload page
# g (51): go to a link
# b (52): go back
# H (53): go to homepage
[ -n "$LESSKEY" ] && echo "AE0rR2MZAG8AmDEAcgCYMgBnAJgzAGIAmDQASACYNQBlAAB2AAB4RW5k" | \
	base64 -d  > "$LESSKEY"

# Configuration step
if [ -e "$configfile" ]
then
	margin="$(grep margin "$configfile" | cut -d '=' -f 2,3)"
	homepage="$(grep homepage "$configfile" | cut -d '=' -f 2,3)"
fi

# Default values
[ -z "$margin" ] && margin=8
[ -z "$homepage" ] && homepage="gemini.circumlunar.space/"

[ -e "$debug" ] && {
	echo "Starting with ${args:-$homepage}"
	echo " - margin:	$margin"
}

# First request
fetch $(parseurl "${args:-$homepage}")

