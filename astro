#!/bin/sh

usage() {
	echo "Astro v0.5.0: Send or read emails from your terminal."
	echo ""
	echo "Usage: astro [url]|[option]"
	echo ""
	echo "Options:"
	echo "  -h		show this help"
	echo "  --help	show this help"
	echo "  --version	show version info"
	echo ""
	echo "Examples:"
	echo "  astro		Start browsing the default webpage"
	echo "  astro url	Start browsing url"
	echo "  astro --help	Show help"
	echo ""
	echo "Debugging:"
	echo "  debug=1 astro	Will start astro in debug mode"
	echo ""
	echo "Report bugs to: bleemayer@gmail.com"
	echo "Home page: <https://www.github.com/blmayer/astro/>"
	echo "General help: <https://www.github.com/blmayer/astro/wiki>"
}

version() {
	echo "astro 0.5.0"
	echo "Copyright (C) 2021 Brian Mayer."
	echo "License MIT: MIT License <https://opensource.org/licenses/MIT>"
	echo "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,"
	echo "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
	echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT."
	echo ""
	echo "Written by Brian Lee Mayer."
}

# Returns the complete url scheme with gemini defaults
# Parameters: url
parseurl() {
	# Credits: https://stackoverflow.com/a/6174447/7618649
	proto="$(echo "$1" | grep // | sed -e's,^\(.*:\?//\).*,\1,g')"	# extract the protocol
	url="${1/$proto/}"						# remove the protocol
	proto="$(echo "$proto" | sed -e 's,:\?//,,g')"
	user="$(echo "$url" | grep @ | cut -d@ -f1)" 			# extract the user (if any)
	hostport="$(echo "${url/$user@/}" | cut -d/ -f1)" 		# extract the host and port
	host="$(echo "$hostport" | sed -e 's,:.*,,g')" 			# by request host without port

	# by request - try to extract the port
	port="$(echo "$hostport" | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
	path="$(echo "$url" | grep / | cut -d/ -f2-)" 			# extract the path (if any)
	
	[ "$debug" ] && echo "Parsed URL: proto: $proto host: $host port: $port path:$path" >&2
	echo "${proto:-gemini}" "$host" "${port:-1965}" "${path:-index.gmi}"
	return 0
}

# Parses the first line from the response
# Spec draft is here: https://gemini.circumlunar.space/docs/specification.html
LESS="q: quit, g: go to link, r: reload, b: back and o: open"
parsegemini() {
	# First line is status and meta information
	read -r status meta
	[ "$debug" ] && echo "Response header: $status $meta" >&2

	# Validate
	case "$status" in
		10)
			echo "Input needed"
			return 1
			;;
		11)
			echo "Sensitive input needed"
			return 2
			;;
		31|32)
			# Redirect
			[ "$debug" ] && echo "Redirect to: $meta" >&2
			fetch $(parseurl "$meta") | parsegemini
			return 0
			;;
		40)
			echo "Temporary failure"
			return 3
			;;
		41)
			return 4
			;;
		42)
			return 5
			;;
		43)
			return 6
			;;
		44)
			return 7
			;;
		51)
			echo "Page not found!"
			return 9
			;;
		52)
			return 10
			;;
		53)
			return 11
			;;
		59)
			echo "Bad request"
			return 12
			;;
		60)
			return 13
			;;
		61)
			return 14
			;;
		62)
			return 15
			;;
	esac

	# Success
	[ "$debug" ] && echo "Success, reading body"
	[ -f "$cachedir/links.txt" ] && rm "$cachedir/links.txt"
	i=1
	while read -r line
	do
		line="$(echo "$line" | tr -d '\r')"
		case "$line" in
			"=>"*)
				link="$(echo "$line" | sed -e 's/^=> *\(\S\+\)\s*.\+/\1/g')"
				[ "$debug" ] && echo "Got link: $link"

				echo "$i	$link" >> "$cachedir/links.txt"
				i=$((i + 1))
				echo "$line"
				;;
			'```'*)
				echo ""
				;;
			*)
				echo "$line"
				;;
		esac
	done | less -k "$LESSKEY" -P "$LESS" +k
	code="$?"

	[ "$debug" ] && echo "pager exit code: $code"

	# Choose what to do next

	case "$code" in
		0)
			return
			;;
		49)
			printf "Type url: "
			read -r url
			[ "$debug" ] && echo "New url: $url" >&2

			prev="$proto://$host:$port/$path"
			[ "$debug" ] && echo "prev: $prev"
			;;
		50)
			[ "$debug" ] && echo "Refresh: $url" >&2
			;;
		51)
			prev="$proto://$host:$port/$path"
			[ "$debug" ] && echo "prev: $prev"

			cat "$cachedir/links.txt"
			printf "Enter link number: "
			read -r -u 1 i
			url="$(grep -G "^$i	" "$cachedir/links.txt" | cut -d'	' -f2)"
			;;
		52)
			url="$prev"
			;;
	esac

	# Add domain for incomplete links
	echo "$url" | grep -q "//" || url="$host/$url"
	read -r proto host port path << EOF
$(parseurl "$url")
EOF
	[ "$debug" ] && echo "Seeking link: $url" >&2
	fetch "$proto" "$host" "$port" "$path" | parsegemini

}

# Fetches the gemini response from server
# Parameters: proto, host, port and path
fetch() {
	[ "$debug" ] && echo "Requesting $1://$2:$3/$4" >&2
	echo "$1://$2:$3/$4" | openssl s_client \
		-connect "$2:$3" -crlf -quiet \
		-ign_eof 2> /dev/null
}

# Execution

# Restore terminal
# trap "tput rmcup && exit" EXIT SIGINT SIGHUP

# Parse arguments
args="$*"
case "$args" in
	'--help'* | '-h'*)
		usage
		exit
		;;
	'--version'*)
		version
		exit
		;;
esac

# Configuration
[ -n "$HOME/.config/astro" ] && mkdir -p "$HOME/.config/astro"
configfile="$HOME/.config/astro/astro.conf"
LESSKEY="$HOME/.config/astro/less.keys"

# This is the final binary form, to save space, it corresponds to:
# g (49): go to a link, r (50): reload page and o (51): to to a URL
[ -n "$LESSKEY" ] && echo "AE0rR2MUAG8AmDEAcgCYMgBnAJgzAGIAmDQAZQAAdgAAeEVuZA==" | \
	base64 -d  > "$LESSKEY"

[ -n "$HOME/.cache/astro" ] && mkdir -p "$HOME/.cache/astro"
cachedir="$HOME/.cache/astro"

# Configuration step
if [ -e "$configfile" ]
then
	margin="$(grep margin "$configfile" | cut -d '=' -f 2,3)"
	homepage="$(grep homepage "$configfile" | cut -d '=' -f 2,3)"
	width="$(grep width "$configfile" | cut -d '=' -f 2)"
fi

# Setup
curwidth="$(tput cols)"

# Default url
[ -z "$args" ] && args="${homepage-"gemini.circumlunar.space/"}"

# Save terminal
# tput smcup

# First request
read -r proto host port path << EOF
$(parseurl "$args")
EOF

fetch "$proto" "$host" "$port" "$path" | parsegemini

